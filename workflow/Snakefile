
import os
from os.path import join as pjoin

#------------------------#
configfile: "../config/configuration.yml"

# inputs
loci  = config["gene_set"].split()
assay = config["datasets"].split()

#------------------------#

from datetime import date

today = date.today()
my_date = today.strftime('%d-%b-%y')
#print("Today is:", formatted_date)
#------------------------#

# functions
def get_mem_mb(wildcards, attempt):
    return 66672 + attempt * 4096

def get_mem_plt(wildcards, attempt):
    return 2192 + attempt * 2048

def higher_time(wildcards, attempt):
    return 1 + attempt * 2
#------------------------#

# a pseudo-rule that collects the target files
rule all:
	input:
		expand("results/plot_histogram/{locus}_plot_histo.png", locus = loci),
		expand("results/plot_annotation/{locus}_plot_annotations.png", locus = loci),
		expand("results/plot_gene/{locus}_plot_gene.png", locus = loci),
		expand("results/report/{locus}_merged_data_summary.txt", locus = loci),
		expand("results/plot_haplotypes/{locus}/{locus}_{assay}_plot_haplotypes.png", locus = loci, assay = assay),
		expand("results/plot_heatmaps/{locus}/{locus}_{assay}_plot_heatmap.png", locus = loci, assay = assay),
		expand("results/result_tidied/{locus}/{locus}_{assay}_association_results_tidied.RDS", locus = loci, assay = assay),
		#expand("results/report_html/{locus}_report.html", locus = loci)

#------------------------#

rule get_locus:
	input:
		script = "scripts/01-1_subsetting_vcf.sh",
		position = config["path_loci"],
		vcf = config["path_vcf"]
	output:
		vcf = "results/genotype/{locus}.vcf.gz",
	conda:
        "../envs/fine_mapping.yml"
	params:
		LOCUS = "{locus}"
	resources:
		runtime=lambda wc, attempt: attempt * 30,
		mem_mb=get_mem_plt, disk_mb=5000
	shell:
		"""
		bash {input.script} {input.position} {params.LOCUS} {input.vcf} {output.vcf}
		"""
#------------------------#

rule get_dosage:
	input:
		script = "scripts/01-2_extracting_dosage.sh",
		vcf    = "results/genotype/{locus}.vcf.gz"
	output:
		dosage     = "results/dosage/{locus}_dosage.txt",
		variants   = "results/annotation/{locus}_variants.list",
		annotation = "results/annotation/{locus}_annotation.txt"
	conda:
        "../envs/fine_mapping.yml"
	resources:
		runtime=lambda wc, attempt: attempt * 30,
		mem_mb=get_mem_plt, disk_mb=5000
	shell:
		"""
		bash {input.script} {input.vcf} {output.dosage} {output.variants} {output.annotation}
		"""
#------------------------#

rule plot_histogram:
	input:
		script   = "scripts/01-3_plot_histogram.R",
		variants = "results/annotation/{locus}_variants.list"
	output:
		plot = "results/plot_histogram/{locus}_plot_histo.png"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#variants
	shell:
		"""
		Rscript {input.script} {input.variants} {output.plot}
		"""
#------------------------#

rule plot_annotation:
	input:
		script = "scripts/01-4_plot_annotation.R",
		annotation = "results/annotation/{locus}_annotation.txt"
	output:
		plot = "results/plot_annotation/{locus}_plot_annotations.png"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#annotation
	shell:
		"""
		Rscript {input.script} {input.annotation} {output.plot}
		"""
#------------------------#

rule plot_gene:
	input:
		script = "scripts/01-5_plot_genes.R",
		annotation = "results/annotation/{locus}_annotation.txt"
	output:
		plot = "results/plot_gene/{locus}_plot_gene.png"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#annotation
	shell:
		"""
		Rscript {input.script} {input.annotation} {output.plot}
		"""
#------------------------#

rule merge_data:
	input:
		script = "scripts/03-1_haplotypes_data.R",
		dosage = "results/dosage/{locus}_dosage.txt",
		phenotype=lambda wildcards: config["phenotype_files"][int(wildcards.phenotype_idx)],
	output:
		ophen = "results/pheno/{locus}/{locus}_phen_merged_data.csv",
		ometa = "results/pheno/{locus}/{locus}_meta_merged_data.csv",
		oprot = "results/pheno/{locus}/{locus}_prot_merged_data.csv",
		summ  = "results/report/{locus}_merged_data_summary.txt"
    conda:
        "../envs/fine_mapping.yml"
	params:
        covariates_provided=True if config["covariates_file"] else False
	log:
		"logs/merge_data/{locus}_merged_data.log"
	resources:
		runtime=lambda wc, attempt: attempt * 30,
		mem_mb=get_mem_plt, disk_mb=20000
	shell:
        """
        if [ {params.covariates_provided} = True ]; then
            Rscript {input.script}
				--vcf {input.dosage} \
				--phenotype {input.phenotype}  \
                --covariates {input.covariates} \
				--output {output.ophen}
        else
            Rscript {input.script} \
				--vcf {input.vcf} \
				--phenotype {input.phenotype}  \
                --output {output.model_results} \
				--intercept_only
        fi
        """
	shell:
		"""
		Rscript {input.script} {input.dosage} {output.ophen} {output.ometa} {output.oprot} {output.summ} 2> {log}
		"""
#------------------------#

rule build_haplotypes:
	input:
		script = "scripts/03-2_haplotypes_building.R",
		data   = "results/pheno/{locus}/{locus}_{assay}_merged_data.csv"
	output:
		result = "results/result_associations/{locus}/{locus}_{assay}_association_results.RDS"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#data
	log:
		"logs/build_haplotypes/{locus}/{locus}_{assay}.log"
	resources:
		runtime=lambda wc, attempt: attempt * 6000,
		mem_mb=get_mem_mb
	shell:
		"""
		Rscript {input.script} {input.data} {output.result} 2> {log}
		"""
#------------------------#

rule plot_haplotypes:
	input:
		script = "scripts/03-3_haplotypes_plot.R",
		result = "results/result_associations/{locus}/{locus}_{assay}_association_results.RDS",
		annotation = "results/annotation/{locus}_annotation.txt",
		variants = "results/annotation/{locus}_variants.list"
	output:
		plt1 = "results/plot_haplotypes/{locus}/{locus}_{assay}_plot_haplotypes.png",
		plt2 = "results/plot_haplotypes/{locus}/{locus}_{assay}_plot_haplotypes_shrinked.png"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#result
	log:
		"logs/plot_haplotypes/{locus}/{locus}_{assay}.log"
	resources:
		runtime=lambda wc, attempt: attempt * 30,
		mem_mb=get_mem_plt, disk_mb=20000
	shell:
		"""
		Rscript {input.script} {input.result} {input.annotation} {input.variants} {output.plt1} {output.plt2} 2> {log}
		"""
#------------------------#

rule plot_heatmap:
	input:
		script = "scripts/03-4_haplotypes_heatmap.R",
		result = "results/result_associations/{locus}/{locus}_{assay}_association_results.RDS"
	output:
		plt = "results/plot_heatmaps/{locus}/{locus}_{assay}_plot_heatmap.png",
		tbl = "results/result_signif/{locus}/{locus}_{assay}_association_results_signif.csv",
		rds = "results/result_tidied/{locus}/{locus}_{assay}_association_results_tidied.RDS"
	conda:
        "../envs/fine_mapping.yml"
	params:
		#result
	log:
		"logs/plot_heatmaps/{locus}/{locus}_{assay}.log"
	resources:
		runtime=lambda wc, attempt: attempt * 30,
		mem_mb=get_mem_plt, disk_mb=32000
	shell:
		"""
		Rscript {input.script} {input.result} {output.plt} {output.tbl} {output.rds} 2> {log}
		"""

#------------------------#
#ruleorder: get_locus > get_dosage > plot_histogram > plot_annotation > plot_genes > merge_data > build_haplotypes > plot_haplotypes > plot_heatmap
#------------------------#

